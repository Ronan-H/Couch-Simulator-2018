package ronan_hanley.galway_game_jam.nine.level;

import static ronan_hanley.galway_game_jam.nine.entity.MovingEntity.FULL_RAD_ROTATION;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Rectangle;

import ronan_hanley.galway_game_jam.nine.entity.Camera;
import ronan_hanley.galway_game_jam.nine.entity.Human;
import ronan_hanley.galway_game_jam.nine.entity.MovingEntity;
import ronan_hanley.galway_game_jam.nine.entity.furniture.Furniture;

public class Level {
	private Image image;
	private Image floorImg;
	private int width;
	private int height;
	private boolean[] pixels;
	
	public Level(int levelNum) {
		try {
			image = new Image(String.format("res/level%d.png", levelNum));
			floorImg = new Image("res/carpet.png");
		} catch (SlickException e) {
			e.printStackTrace();
		}
		
		loadPixels();
		
		width = image.getWidth();
		height = image.getHeight();
	}
	
	public int getWidth() {
		return width;
	}
	
	public int getHeight() {
		return height;
	}
	
	private void loadPixels() {
		pixels = new boolean[image.getWidth() * image.getHeight()];
		
		int pixelCounter = 0;
		
		for (int y = 0; y < image.getHeight(); ++y) {
			for (int x = 0; x < image.getWidth(); x++) {
				pixels[pixelCounter++] = image.getColor(x, y).equals(Color.black);
			}
		}
	}
	
	public boolean collides(MovingEntity e) {
		int fromX = e.getX();
		int fromY = e.getY();
		int toX = e.getX() + e.getWidth();
		int toY = e.getY() + e.getHeight();
		
		for (int y = fromY; y < toY; ++y) {
			for (int x = fromX; x < toX; ++x) {
				int pixelIndex = (y * width) + x;
				if (pixels[pixelIndex]) {
					return true;
				}
			}
		}
		
		return false;
	}
	
	public boolean inLineOfSight(Human human, Furniture f) {
		final double angIncrement = FULL_RAD_ROTATION / 72;
		
		double rayX, rayY;
		
		for (double ang = -(human.getFov() /2); ang < human.getFov() / 2; ang += angIncrement) {
			double newAng = (human.getAngle() + ang) % FULL_RAD_ROTATION;
			
			rayX = human.getX();
			rayY = human.getY();
			for (int rayLen = 1; rayLen < human.getSightDistance(); ++rayLen) {
				rayX += Math.cos(newAng);
				rayY += Math.sin(newAng);
				
				// check if the ray hits a wall
				if (pixels[((int)rayY) * width + ((int)rayX)]) {
					break;
				}
				
				// check if point is inside rectangle
				Rectangle fRect = new Rectangle(f.getX(), f.getY(), f.getWidth(), f.getHeight());
				
				boolean rayIntersects = (fRect.contains((float) rayX, (float) rayY));
				
				if (rayIntersects) {
					return true;
				}
			}
		}
		
		return false;
	}
	
	public void render(Graphics g, Camera cam) {
		g.drawImage(image, -cam.getX(), -cam.getY());
	}
	
}
