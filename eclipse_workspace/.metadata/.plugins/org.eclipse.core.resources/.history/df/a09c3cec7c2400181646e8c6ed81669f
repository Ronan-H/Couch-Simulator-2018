package ronan_hanley.galway_game_jam.nine.state;

import java.util.ArrayList;
import java.util.List;

import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.StateBasedGame;

import ronan_hanley.galway_game_jam.nine.Game;
import ronan_hanley.galway_game_jam.nine.Input;
import ronan_hanley.galway_game_jam.nine.entity.Camera;
import ronan_hanley.galway_game_jam.nine.entity.furniture.Couch;
import ronan_hanley.galway_game_jam.nine.entity.furniture.Furniture;
import ronan_hanley.galway_game_jam.nine.level.Level;

public class PlayingState extends TransferableState {
	private List<Furniture> furniture;
	private Furniture player;
	private Level currentLevel;
	private Camera camera;
	
	public PlayingState(StateBasedGame sbg, Input input) {
		super(sbg, input);
	}
	
	@Override
	public void init(GameContainer gc, StateBasedGame sbg) throws SlickException {
		super.init(gc, sbg);
		
		furniture = new ArrayList<Furniture>();
		player = new Couch(200, currentLevel.getHeight() - 200);
		
		currentLevel = new Level(1);
		camera = new Camera(0, currentLevel.getHeight() - Game.screenHeight);
	}

	@Override
	public void update(GameContainer gc, StateBasedGame sbg, int delta) throws SlickException {
		for (Furniture f : furniture) {
			f.tick();
		}
		
		if (player != null) {
			// process input
			int xMag = 0;
			int yMag = 0;
			
			if (input.upHeld) yMag -= 1;
			if (input.downHeld) yMag += 1;
			if (input.leftHeld) xMag -= 1;
			if (input.rightHeld) xMag += 1;
			
			if (!(xMag == 0 && yMag == 0)) {
				player.setAngle(Math.atan2(yMag, xMag));
				player.goMaxSpeed();
			}
			else {
				player.stop();
			}
			
			player.tick();
		}
	}
	
	@Override
	public void render(GameContainer gc, StateBasedGame sbg, Graphics g) throws SlickException {
		g.setColor(Color.black);
		g.fillRect(0, 0, Game.screenWidth, Game.screenHeight);
		
		currentLevel.render(g, camera);
		
		for (Furniture f : furniture) {
			f.render(g, camera);
		}
		
		if (player != null) player.render(g, camera);
	}

	@Override
	public int getID() {
		return 0;
	}

}
